# db_helpers.py
import aiosqlite
from datetime import datetime, timedelta, timezone
import json
from typing import Optional, List, Dict
from loguru import logger

from config import DATABASE_NAME
# x_ui_manager –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# –°–õ–û–í–ê–†–¨ –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –ò –¢–ï–ö–°–¢–ê–ú–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
# –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
# –ó–∞—Ç–µ–º –∏—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ –≤–µ–±-–∞–¥–º–∏–Ω–∫—É.
# –§–æ—Ä–º–∞—Ç: '–∫–ª—é—á': ('–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', '–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏')
_DEFAULT_SETTINGS = {
       # --- –¢–µ–∫—Å—Ç—ã: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    'text_welcome_message': (
        "üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "üöÄ <b>{project_name}</b> ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!\n\n"
        "‚Ä¢ ‚ö°Ô∏è –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ 1 –ì–±–∏—Ç/—Å\n"
        "‚Ä¢ üîí –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ VLESS + Reality\n"
        "‚Ä¢ üåç –°–µ—Ä–≤–µ—Ä—ã –≤ –ì–µ—Ä–º–∞–Ω–∏–∏\n"
        "‚Ä¢ üõ°Ô∏è –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –±–µ–∑ –ª–æ–≥–æ–≤\n"
        "‚Ä¢ üí∞ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞\n",
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {user_name}, {project_name}'
    ),
    'text_trial_already_used': ('üòî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ ‚¨áÔ∏è', '–¢–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç'),
    'text_subscription_info': (
        "‚ÑπÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
        "–°—Ç–∞—Ç—É—Å: {status}\n"
        "–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expiry_date}\n\n"
        "üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
        "üìã {sub_link}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ üì±Android –∏–ª–∏ üçéiOS",
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {status}, {expiry_date}, {sub_link}'
    ),
    'text_no_active_subscription': ('‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.', '–¢–µ–∫—Å—Ç, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'),

    # --- –¢–µ–∫—Å—Ç—ã: –û–ø–ª–∞—Ç–∞ ---
    'text_payment_prompt': (
        "üí≥ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π –∑–∞ {price} {currency}, "
        "–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ:\n{payment_url}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂",
        '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {days}, {price}, {currency}, {payment_url}'
    ),
    'text_payment_checking': ('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂...', '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞'),
    'text_payment_success': (
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –ø—Ä–æ–¥–ª–µ–Ω–∞.\n"
        "–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiry_date}\n\n"
        "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n<code>{sub_link}</code>",
        '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {days}, {expiry_date}, {sub_link}'
    ),
    'text_payment_pending': ('‚è≥ –ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞.', '–°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏'),
    'text_payment_canceled_or_failed': ('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', '–°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω'),
    'text_payment_not_found': ('ü§∑ –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', '–°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'),

    # --- –¢–µ–∫—Å—Ç—ã: –ü—Ä–æ–º–æ–∫–æ–¥—ã ---
    'text_promo_code_prompt': ('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:', '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–æ–∫–æ–¥–∞'),
    'text_promo_code_success': (
        "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.\n"
        "–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiry_date}",
        '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {code}, {days}, {expiry_date}'
    ),
    'text_promo_code_invalid': ('‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–µ'),
    'text_promo_code_already_used': ('‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.', '–°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'),

    # --- –¢–µ–∫—Å—Ç—ã: –û—à–∏–±–∫–∏ ---
    'text_error_general': ('‚öôÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', '–û–±—â–∞—è –æ—à–∏–±–∫–∞'),
    'text_error_creating_user': ('üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ X-UI'),
    'text_error_xui_connection': ('üîå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPN —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ X-UI'),

    # --- –¢–µ–∫—Å—Ç—ã: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ "–û —Å–µ—Ä–≤–∏—Å–µ" ---
    'text_trial_success': (
        "üéâ –í–∞—à –ø—Ä–æ–±–Ω—ã–π VPN –Ω–∞ {days} –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        "üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
        "üìã {sub_link}\n\n"
        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expiry_date}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ üì±Android –∏–ª–∏ üçéiOS",
        '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏–∞–ª–∞. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {days}, {sub_link}, {expiry_date}'
    ),
    'text_android_guide': (
        "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –¥–ª—è Android:\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTun –∏–∑ Google Play.\n"
        "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '+' –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª –∏–ª–∏ ¬´–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É¬ª.\n"
        "4. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\nüîó <code>{sub_link}</code>\n"
        "5. –ù–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.\n"
        "6. –í–∫–ª—é—á–∏—Ç–µ VPN, –Ω–∞–∂–∞–≤ –Ω–∞ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–µ VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.",
        '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {sub_link}'
    ),
    'text_ios_guide': (
        "üçé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –¥–ª—è iOS:\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTun –∏–∑ App Store.\n"
        "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '+' –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª –∏–ª–∏ ¬´–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É¬ª.\n"
        "4. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\nüîó <code>{sub_link}</code>\n"
        "5. –ù–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª.\n"
        "6. –í–∫–ª—é—á–∏—Ç–µ VPN, –Ω–∞–∂–∞–≤ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞.\n\n"
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–µ VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.",
        '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iOS. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {sub_link}'
    ),
    'text_about_service': (
        "üöÄ {project_name} ‚Äî –≤–∞—à –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!\n\n"
        "‚ö°Ô∏è –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:\n"
        "‚Ä¢ –î–æ 1 –ì–±–∏—Ç/—Å ‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ 4K –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
        "‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã –≤ –ì–µ—Ä–º–∞–Ω–∏–∏ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
        "‚Ä¢ VLESS + Reality ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª\n\n"
        "üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞:\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –ª–æ–≥–æ–≤ ‚Äî –≤–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π\n"
        "‚Ä¢ –£–º–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —É—Ç–µ—á–µ–∫ ‚Äî –ø–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n\n"
        "‚ú® –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å:\n"
        "‚Ä¢ –ù–∏–∫–∞–∫–æ–π —Ä–µ–∫–ª–∞–º—ã ‚Äî —á–∏—Å—Ç—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞ 1 –º–∏–Ω—É—Ç—É ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∏ –∏ –ø–æ–ª—å–∑—É–π—Å—è\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏\n"
        "‚Ä¢ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞ ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç",
        '–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–û —Å–µ—Ä–≤–∏—Å–µ". –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {project_name}'
    ),

    # --- –¢–µ–∫—Å—Ç—ã: –ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ ---
    'btn_renew_sub': ('üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ({days} –¥–Ω. - {price} {currency})', '–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏'),
    'btn_activate_code': ('üéüÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ 30 –¥–Ω–µ–π', '–ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞'),
    'btn_android_guide': ('üì±Android', '–ö–Ω–æ–ø–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Android'),
    'btn_ios_guide': ('üçéiOS', '–ö–Ω–æ–ø–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è iOS'),
    'btn_about_service': ('‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ', '–ö–Ω–æ–ø–∫–∞ "–û —Å–µ—Ä–≤–∏—Å–µ"'),
    'btn_support': ('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"'),
    'btn_check_payment': ('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂', '–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞'),
    'btn_back_to_main': ('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
    'btn_download_android': ('üì• –°–∫–∞—á–∞—Ç—å V2rayTun', '–ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Android'),
    'btn_download_ios': ('üì• –°–∫–∞—á–∞—Ç—å V2rayTun', '–ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è iOS'),
    
    # --- –¢–µ–∫—Å—Ç—ã: –ê–¥–º–∏–Ω–∫–∞ ---
    'admin_text_promo_codes_menu': ('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ'),
    'admin_text_promo_code_created': ("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:\n\n<code>{code}</code>", '–ê–¥–º–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {code}'),
    'admin_web_password': ('admin123', '–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–∞–¥–º–∏–Ω–∫—É. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –°–ú–ï–ù–ò–¢–ï!'),
    
    # --- –¢–µ–∫—Å—Ç—ã: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    'text_subscription_expiring': ('‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø.', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏'),
    'text_subscription_expired': ('üòî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–µ.', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏'),
    'text_subscription_expired_main': ('üòî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN.', '–¢–µ–∫—Å—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ, –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞'),

    # --- –°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    'android_app_link': ('https://play.google.com/store/apps/details?id=com.example.v2raytun', '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Android'),
    'ios_app_link': ('https://apps.apple.com/app/id1234567890', '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è iOS'),

    # --- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (Step-by-step guide) ---
    'step_guide_1_text': (
        '<b>1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTun</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª.',
        '–¢–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ 1 –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.'
    ),
    'step_guide_android_url': (
        'https://play.google.com/store/apps/details?id=com.v2raytun.android',
        '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Android –≤ —à–∞–≥–µ 1 –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.'
    ),
    'step_guide_ios_url': (
        'https://apps.apple.com/ru/app/v2raytun/id6476628951',
        '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è iOS –≤ —à–∞–≥–µ 1 –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.'
    ),
    'step_guide_2_text': (
        '<b>2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\nüîó <code>{sub_link}</code>\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.',
        '–¢–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ 2 –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {sub_link}'
    ),
    'step_guide_3_text': (
        '<b>3Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTun</b>\n\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ—Å—Ç—É–ø—ã, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.',
        '–¢–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ 3 –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.'
    ),
    'step_guide_4_text': (
        '<b>4Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É</b>\n\n–ù–∞–∂–º–∏—Ç–µ <b>+</b> –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª.',
        '–¢–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ 4 –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.'
    ),
    'step_guide_5_text': (
        '<b>5Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ VPN</b>\n\n–í —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n‚úÖ –ì–æ—Ç–æ–≤–æ! VPN –ø–æ–¥–∫–ª—é—á—ë–Ω.',
        '–¢–µ–∫—Å—Ç –¥–ª—è —à–∞–≥–∞ 5 –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.'
    ),
    # --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ---
    'step_guide_btn_android': ('–°–∫–∞—á–∞—Ç—å –¥–ª—è üì±Android', '–ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'),
    'step_guide_btn_ios': ('–°–∫–∞—á–∞—Ç—å –¥–ª—è üçéiOS', '–ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è iOS-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'),
    'step_guide_btn_next': ('‚û°Ô∏è –î–∞–ª–µ–µ', '–ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –≤ –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'),
    'step_guide_btn_back': ('‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', '–ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" –≤ –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'),
}

async def init_db():
    async with aiosqlite.connect(DATABASE_NAME) as db:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                telegram_id INTEGER PRIMARY KEY,
                username TEXT,
                xui_client_uuid TEXT,
                xui_client_email TEXT,
                subscription_end_date TEXT,
                is_trial_used INTEGER DEFAULT 0,
                current_server_id INTEGER,
                notified_expiring INTEGER DEFAULT 0,
                notified_expired INTEGER DEFAULT 0,
                is_active INTEGER DEFAULT 1,
                limit_ip INTEGER DEFAULT 0
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                payment_id TEXT PRIMARY KEY,
                telegram_id INTEGER,
                amount REAL,
                currency TEXT,
                status TEXT DEFAULT 'pending', -- pending, succeeded, canceled
                created_at TEXT,
                metadata_json TEXT,
                FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS promo_codes (
                code TEXT PRIMARY KEY,
                is_active INTEGER DEFAULT 1,
                activated_by_telegram_id INTEGER,
                activated_at TEXT,
                created_at TEXT,
                FOREIGN KEY (activated_by_telegram_id) REFERENCES users (telegram_id)
            )
        ''')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await db.execute('''
            CREATE TABLE IF NOT EXISTS settings (
                key TEXT PRIMARY KEY,
                value TEXT,
                description TEXT
            )
        ''')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
        await db.execute('''
            CREATE TABLE IF NOT EXISTS tariffs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                days INTEGER NOT NULL,
                price REAL NOT NULL,
                currency TEXT DEFAULT 'RUB',
                is_active INTEGER DEFAULT 1,
                sort_order INTEGER DEFAULT 0,
                description TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.commit()
    
    await populate_default_settings()
    await populate_default_tariffs()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def populate_default_settings():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö —Ç–∞–º –µ—â–µ –Ω–µ—Ç."""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        for key, (value, description) in _DEFAULT_SETTINGS.items():
            await db.execute(
                "INSERT OR IGNORE INTO settings (key, value, description) VALUES (?, ?, ?)",
                (key, str(value), description)
            )
        await db.commit()
    logger.info("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–æ {} –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ë–î.".format(len(_DEFAULT_SETTINGS)))

async def populate_default_tariffs():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–∞—Ä–∏—Ñ–æ–≤ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö —Ç–∞–º –µ—â–µ –Ω–µ—Ç."""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞—Ä–∏—Ñ—ã
        cursor = await db.execute("SELECT COUNT(*) FROM tariffs")
        count = (await cursor.fetchone())[0]
        
        if count == 0:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            default_days = int(_DEFAULT_SETTINGS.get('subscription_days', ('30', ''))[0])
            default_price = float(_DEFAULT_SETTINGS.get('subscription_price', ('79.00', ''))[0])
            default_currency = _DEFAULT_SETTINGS.get('subscription_currency', ('RUB', ''))[0]
            
            await db.execute('''
                INSERT INTO tariffs (name, days, price, currency, is_active, sort_order, description)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ ({default_days} –¥–Ω–µ–π)",
                default_days,
                default_price,
                default_currency,
                1,
                0,
                f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {default_days} –¥–Ω–µ–π"
            ))
            await db.commit()
            logger.info("–°–æ–∑–¥–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

async def load_all_settings() -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute("SELECT key, value FROM settings") as cursor:
            return {row[0]: row[1] for row in await cursor.fetchall()}

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_user, add_user, etc. –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def get_user(telegram_id: int):
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,)) as cursor:
            return await cursor.fetchone()

async def add_user(telegram_id: int, username: str = None):
    async with aiosqlite.connect(DATABASE_NAME) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (telegram_id, username) VALUES (?, ?)",
            (telegram_id, username)
        )
        await db.commit()

async def update_user_subscription(telegram_id: int, xui_client_uuid: str, xui_client_email: str,
                                   subscription_end_date: datetime, server_id: int, is_trial: bool = False, limit_ip: int = 0):
    # --- –ó–ê–©–ò–¢–ê –û–¢ –ù–ê–ò–í–ù–´–• –î–ê–¢ ---
    if subscription_end_date.tzinfo is None:
        logger.warning(f"–í update_user_subscription –ø–µ—Ä–µ–¥–∞–Ω–∞ –ù–ê–ò–í–ù–ê–Ø –¥–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}. "
                       f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–∞—Ç—É —Å —Ç–∞–π–º–∑–æ–Ω–æ–π.")
        subscription_end_date = subscription_end_date.astimezone()
    # --------------------------------

    end_date_str = subscription_end_date.isoformat()
    async with aiosqlite.connect(DATABASE_NAME) as db:
        await db.execute(
            """UPDATE users 
               SET xui_client_uuid = ?, xui_client_email = ?, subscription_end_date = ?, 
                   is_trial_used = CASE WHEN ? THEN 1 ELSE is_trial_used END,
                   current_server_id = ?,
                   limit_ip = ?
               WHERE telegram_id = ?""",
            (xui_client_uuid, xui_client_email, end_date_str, 1 if is_trial else 0, server_id, limit_ip, telegram_id)
        )
        await db.execute(
            """UPDATE users
               SET xui_client_uuid = ?, xui_client_email = ?, subscription_end_date = ?, current_server_id = ?, limit_ip = ?
               WHERE telegram_id = ? AND (xui_client_uuid IS NULL OR xui_client_uuid = '')""",
            (xui_client_uuid, xui_client_email, end_date_str, server_id, limit_ip, telegram_id)
        )
        if is_trial:
             await db.execute("UPDATE users SET is_trial_used = 1 WHERE telegram_id = ?", (telegram_id,))
        await db.execute(
            "UPDATE users SET notified_expiring = 0 WHERE telegram_id = ?",
            (telegram_id,)
        )
        await db.execute(
            "UPDATE users SET notified_expired = 0 WHERE telegram_id = ?",
            (telegram_id,)
        )
        await db.commit()
    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. UUID: {xui_client_uuid}, –¥–æ: {end_date_str}, limit_ip: {limit_ip}")

async def deactivate_user(telegram_id: int):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ–ª—É—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏."""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        await db.execute("UPDATE users SET is_active = 0 WHERE telegram_id = ?", (telegram_id,))
        await db.commit()
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä–æ—è—Ç–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")

async def get_active_subscription(telegram_id: int):
    user = await get_user(telegram_id)
    if user and user[4]: # subscription_end_date
        try:
            sub_end_date = datetime.fromisoformat(user[4])
            if sub_end_date > datetime.now(sub_end_date.tzinfo): # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å
                return {
                    "telegram_id": user[0],
                    "username": user[1],
                    "xui_client_uuid": user[2],
                    "xui_client_email": user[3],
                    "subscription_end_date": sub_end_date,
                    "is_trial_used": bool(user[5]),
                    "current_server_id": user[6],
                    "limit_ip": user[10] if len(user) > 10 else 0
                }
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {user[4]}")
    return None

async def add_payment(payment_id: str, telegram_id: int, amount: float, currency: str, metadata_json: Optional[str] = None):
    created_at_str = datetime.now(timezone.utc).isoformat() # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–ª—è created_at
    async with aiosqlite.connect(DATABASE_NAME) as db:
        await db.execute(
            "INSERT INTO payments (payment_id, telegram_id, amount, currency, created_at, status, metadata_json) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (payment_id, telegram_id, amount, currency, created_at_str, 'pending', metadata_json)
        )
        await db.commit()
    logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è {telegram_id} —Å–æ–∑–¥–∞–Ω. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata_json}")

async def get_payment(payment_id: str):
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute("SELECT payment_id, telegram_id, amount, currency, status, created_at, metadata_json FROM payments WHERE payment_id = ?", (payment_id,)) as cursor:
            return await cursor.fetchone()

async def update_payment_status(payment_id: str, status: str):
    async with aiosqlite.connect(DATABASE_NAME) as db:
        await db.execute("UPDATE payments SET status = ? WHERE payment_id = ?", (status, payment_id))
        await db.commit()
    logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}.")

async def delete_xui_user_db_record(telegram_id: int):
    async with aiosqlite.connect(DATABASE_NAME) as db:
        await db.execute(
            """UPDATE users 
               SET xui_client_uuid = NULL, xui_client_email = NULL, subscription_end_date = NULL, current_server_id = NULL
               WHERE telegram_id = ?""",
            (telegram_id,)
        )
        await db.commit()
    logger.info(f"–ó–∞–ø–∏—Å—å –æ XUI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è {telegram_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î (–Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∫–∞).")

async def get_pending_payments(limit: int = 100):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'."""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(
                "SELECT payment_id, telegram_id, amount, currency, status, created_at, metadata_json "
                "FROM payments WHERE status = 'pending' ORDER BY created_at DESC LIMIT ?", (limit,)
        ) as cursor:
            return await cursor.fetchall()

async def get_total_users_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute("SELECT COUNT(*) FROM users") as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 0

async def get_active_subscriptions_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(
            "SELECT COUNT(*) FROM users WHERE subscription_end_date > datetime('now')"
        ) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 0

async def get_trial_users_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(
            "SELECT COUNT(*) FROM users WHERE is_trial_used = 1"
        ) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 0

async def get_total_payments_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π"""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute("SELECT COUNT(*) FROM payments") as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 0

async def get_successful_payments_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(
            "SELECT COUNT(*) FROM payments WHERE status = 'succeeded'"
        ) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 0

async def get_total_payments_amount() -> float:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(
            "SELECT SUM(amount) FROM payments WHERE status = 'succeeded'"
        ) as cursor:
            result = await cursor.fetchone()
            return result[0] if result and result[0] else 0.0

async def get_user_payments(user_id: int) -> List[tuple]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(
            "SELECT * FROM payments WHERE telegram_id = ? ORDER BY created_at DESC",
            (user_id,)
        ) as cursor:
            return await cursor.fetchall()

async def delete_user_subscription(user_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    from x_ui_manager import xui_manager_instance
    from app_config import app_conf

    try:
        async with aiosqlite.connect(DATABASE_NAME) as db:
            async with db.execute(
                "SELECT xui_client_uuid, current_server_id FROM users WHERE telegram_id = ? AND subscription_end_date > datetime('now')",
                (user_id,)
            ) as cursor:
                sub = await cursor.fetchone()
                if not sub: return False
                
                uuid, server_id = sub
                
                server_config = next((s for s in app_conf.get('xui_servers', []) if s['id'] == server_id), None)
                if server_config:
                    await xui_manager_instance.delete_xui_user(server_config, uuid)
                
                await db.execute(
                    """UPDATE users 
                       SET xui_client_uuid = NULL, xui_client_email = NULL, 
                           subscription_end_date = NULL, current_server_id = NULL
                       WHERE telegram_id = ?""",
                    (user_id,)
                )
                await db.commit()
                return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def get_users_list(limit: int = 50, offset: int = 0) -> List[tuple]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(
            """SELECT telegram_id, username, subscription_end_date, is_trial_used, current_server_id 
               FROM users 
               ORDER BY telegram_id DESC 
               LIMIT ? OFFSET ?""",
            (limit, offset)
        ) as cursor:
            return await cursor.fetchall()

async def get_users_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute("SELECT COUNT(*) FROM users") as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 0

async def get_server_config(server_id: int) -> Optional[dict]:
    from app_config import app_conf
    return next((s for s in app_conf.get('xui_servers', []) if s['id'] == server_id), None)

async def get_last_subscription(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞"""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(
            """SELECT telegram_id, username, xui_client_uuid, xui_client_email, 
                      subscription_end_date, is_trial_used, current_server_id, limit_ip 
               FROM users 
               WHERE telegram_id = ? AND xui_client_uuid IS NOT NULL 
               ORDER BY subscription_end_date DESC 
               LIMIT 1""",
            (telegram_id,)
        ) as cursor:
            user = await cursor.fetchone()
            if user and user[2]:  # xui_client_uuid
                try:
                    sub_end_date = datetime.fromisoformat(user[4]) if user[4] else None
                    return {
                        "telegram_id": user[0],
                        "username": user[1],
                        "xui_client_uuid": user[2],
                        "xui_client_email": user[3],
                        "subscription_end_date": sub_end_date,
                        "is_trial_used": bool(user[5]),
                        "current_server_id": user[6],
                        "limit_ip": user[7] if len(user) > 7 else 0
                    }
                except ValueError:
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {user[4]}")
            return None

async def get_all_users() -> List[tuple]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î (–Ω–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö)."""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute("SELECT telegram_id, username, xui_client_uuid, xui_client_email, subscription_end_date, is_trial_used, current_server_id FROM users ORDER BY telegram_id") as cursor:
            return await cursor.fetchall()

async def get_all_xui_users_for_restore() -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å UUID –≤ X-UI, –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.
    """
    async with aiosqlite.connect(DATABASE_NAME) as db:
        db.row_factory = aiosqlite.Row
        query = """
            SELECT
                telegram_id,
                xui_client_uuid,
                xui_client_email,
                subscription_end_date,
                current_server_id
            FROM
                users
            WHERE
                xui_client_uuid IS NOT NULL AND xui_client_uuid != ''
        """
        async with db.execute(query) as cursor:
            rows = await cursor.fetchall()
            return [dict(row) for row in rows]

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def add_promo_code(code: str) -> bool:
    created_at_str = datetime.now(timezone.utc).isoformat()
    async with aiosqlite.connect(DATABASE_NAME) as db:
        try:
            await db.execute(
                "INSERT INTO promo_codes (code, created_at, is_active) VALUES (?, ?, 1)",
                (code, created_at_str)
            )
            await db.commit()
            logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")
            return True
        except aiosqlite.IntegrityError:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥: {code}")
            return False

async def get_promo_code(code: str) -> Optional[tuple]:
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute("SELECT * FROM promo_codes WHERE code = ?", (code,)) as cursor:
            return await cursor.fetchone()

async def activate_promo_code(code: str, telegram_id: int):
    activated_at_str = datetime.now(timezone.utc).isoformat()
    async with aiosqlite.connect(DATABASE_NAME) as db:
        await db.execute(
            "UPDATE promo_codes SET is_active = 0, activated_by_telegram_id = ?, activated_at = ? WHERE code = ?",
            (telegram_id, activated_at_str, code)
        )
        await db.commit()
        logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {telegram_id}.")

async def get_activated_promo_codes_count() -> int:
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute("SELECT COUNT(*) FROM promo_codes WHERE is_active = 0") as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 0

async def get_activated_code_for_user(user_id: int) -> Optional[str]:
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(
            "SELECT code FROM promo_codes WHERE activated_by_telegram_id = ?", (user_id,)
        ) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else None

async def get_promo_codes_list(status: str, limit: int, offset: int) -> List[tuple]:
    query = "SELECT code, is_active, activated_by_telegram_id, activated_at FROM promo_codes"
    params = []
    if status == 'active': query += " WHERE is_active = 1"
    elif status == 'inactive': query += " WHERE is_active = 0"
    query += " ORDER BY created_at DESC LIMIT ? OFFSET ?"
    params.extend([limit, offset])
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(query, tuple(params)) as cursor:
            return await cursor.fetchall()

async def get_promo_codes_count(status: str) -> int:
    query = "SELECT COUNT(*) FROM promo_codes"
    if status == 'active': query += " WHERE is_active = 1"
    elif status == 'inactive': query += " WHERE is_active = 0"
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(query) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 0

async def get_users_with_expiring_subscriptions(days_before: int = 1):
    from datetime import datetime, timedelta
    import aiosqlite
    target_date = (datetime.now() + timedelta(days=days_before)).date()
    async with aiosqlite.connect(DATABASE_NAME) as db:
        async with db.execute(
            "SELECT telegram_id, subscription_end_date FROM users WHERE subscription_end_date IS NOT NULL AND (notified_expiring IS NULL OR notified_expiring = 0) AND is_active = 1"
        ) as cursor:
            result = []
            async for row in cursor:
                if row[1]:
                    try:
                        sub_end = datetime.fromisoformat(row[1])
                        if sub_end.date() == target_date:
                            result.append(row[0])
                    except Exception:
                        continue
            return result

async def get_users_with_expired_subscriptions():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–º –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ Python –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤.
    """
    from datetime import datetime, timezone
    import aiosqlite
    
    now_utc = datetime.now(timezone.utc)

    async with aiosqlite.connect(DATABASE_NAME) as db:
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –±—É–¥–µ—Ç –≤ –∫–æ–¥–µ
        async with db.execute(
            """SELECT telegram_id, subscription_end_date FROM users 
               WHERE subscription_end_date IS NOT NULL 
               AND (notified_expired IS NULL OR notified_expired = 0)
               AND is_active = 1"""
        ) as cursor:
            expired_users = []
            async for row in cursor:
                user_id, sub_end_str = row
                if not sub_end_str:
                    continue
                
                try:
                    # fromisoformat –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç –¥–∞—Ç—ã —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
                    sub_end_date = datetime.fromisoformat(sub_end_str)
                    
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ "–Ω–∞–∏–≤–Ω–∞—è" (–±–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã), –¥–µ–ª–∞–µ–º –µ–µ "–æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–π",
                    # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –æ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞.
                    if sub_end_date.tzinfo is None:
                        sub_end_date = sub_end_date.astimezone()

                    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ timezone-aware datetime –æ–±—ä–µ–∫—Ç–æ–≤
                    if sub_end_date < now_utc:
                        expired_users.append(user_id)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {sub_end_str}. –û—à–∏–±–∫–∞: {e}")
            
            return expired_users

def update_xui_servers_distribution_settings(new_servers_list):
    """
    –ú–∞—Å—Å–æ–≤–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ (exclude_from_auto, max_clients, priority –∏ –¥—Ä.)
    new_servers_list ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏.
    """
    import json
    import sqlite3
    DB_PATH = 'vpn_bot.db'
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE settings SET value = ? WHERE key = 'xui_servers'", (json.dumps(new_servers_list, indent=4),))
    conn.commit()
    conn.close()

async def get_active_clients_count_for_server(server_id: int) -> Optional[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Å –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.
    """
    try:
        async with aiosqlite.connect(DATABASE_NAME) as db:
            cursor = await db.execute(
                """SELECT COUNT(*) FROM users 
                   WHERE current_server_id = ? 
                   AND subscription_end_date IS NOT NULL 
                   AND subscription_end_date > ?""",
                (server_id, datetime.now().isoformat())
            )
            result = await cursor.fetchone()
            return result[0] if result else 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_id}: {e}")
        return None

async def get_active_tariffs() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ sort_order."""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        db.row_factory = aiosqlite.Row
        async with db.execute(
            "SELECT * FROM tariffs WHERE is_active = 1 ORDER BY sort_order, id"
        ) as cursor:
            rows = await cursor.fetchall()
            return [dict(row) for row in rows]

async def get_tariff_by_id(tariff_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –ø–æ ID."""
    async with aiosqlite.connect(DATABASE_NAME) as db:
        db.row_factory = aiosqlite.Row
        async with db.execute(
            "SELECT * FROM tariffs WHERE id = ?", (tariff_id,)
        ) as cursor:
            row = await cursor.fetchone()
            return dict(row) if row else None

async def create_tariff(name: str, days: int, price: float, currency: str = 'RUB', 
                       description: str = '', sort_order: int = 0) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ."""
    try:
        async with aiosqlite.connect(DATABASE_NAME) as db:
            await db.execute('''
                INSERT INTO tariffs (name, days, price, currency, description, sort_order, is_active)
                VALUES (?, ?, ?, ?, ?, ?, 1)
            ''', (name, days, price, currency, description, sort_order))
            await db.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {e}")
        return False

async def update_tariff(tariff_id: int, name: str, days: int, price: float, 
                       currency: str = 'RUB', description: str = '', 
                       sort_order: int = 0, is_active: bool = True) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ."""
    try:
        async with aiosqlite.connect(DATABASE_NAME) as db:
            await db.execute('''
                UPDATE tariffs 
                SET name = ?, days = ?, price = ?, currency = ?, description = ?, 
                    sort_order = ?, is_active = ?
                WHERE id = ?
            ''', (name, days, price, currency, description, sort_order, 
                  int(is_active), tariff_id))
            await db.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {e}")
        return False

async def delete_tariff(tariff_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Ç–∞—Ä–∏—Ñ."""
    try:
        async with aiosqlite.connect(DATABASE_NAME) as db:
            await db.execute("DELETE FROM tariffs WHERE id = ?", (tariff_id,))
            await db.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {e}")
        return False

async def toggle_tariff_active(tariff_id: int) -> bool:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞."""
    try:
        async with aiosqlite.connect(DATABASE_NAME) as db:
            await db.execute(
                "UPDATE tariffs SET is_active = CASE WHEN is_active = 1 THEN 0 ELSE 1 END WHERE id = ?",
                (tariff_id,)
            )
            await db.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–∞: {e}")
        return False