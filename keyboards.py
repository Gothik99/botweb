# keyboards.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app_config import app_conf
import asyncio
from db_helpers import get_active_tariffs

async def get_main_keyboard(is_trial_available: bool, has_active_sub: bool):
    builder = InlineKeyboardBuilder()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    btn_renew_sub = app_conf.get('btn_renew_sub', 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å')
    builder.row(InlineKeyboardButton(
        text=btn_renew_sub,
        callback_data="renew_show_tariffs"
    ))

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —Ç–∞—Ä–∏—Ñ–æ–≤)
    builder.row(InlineKeyboardButton(
        text=app_conf.get('btn_activate_code', 'üéüÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥'),
        callback_data="activate_promo_code_prompt"
    ))

    builder.row(
        InlineKeyboardButton(
            text=app_conf.get('btn_android_guide', 'üì±Android'),
            callback_data="android_guide"
        ),
        InlineKeyboardButton(
            text=app_conf.get('btn_ios_guide', 'üçéiOS'),
            callback_data="ios_guide"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text=app_conf.get('btn_about_service', '‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ'),
            callback_data="about_service"
        ),
        InlineKeyboardButton(
            text=app_conf.get('btn_support', 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'),
            url=app_conf.get('support_link', '')
        )
    )
    
    return builder.as_markup()

def get_payment_keyboard(payment_id: str):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text=app_conf.get('btn_check_payment', 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂'),
        callback_data=f"check_payment_{payment_id}"
    ))
    builder.row(InlineKeyboardButton(
        text=app_conf.get('btn_back_to_main', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'),
        callback_data="back_to_main"
    ))
    return builder.as_markup()

def get_back_to_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text=app_conf.get('btn_back_to_main', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'),
        callback_data="back_to_main"
    ))
    return builder.as_markup()

def get_guide_keyboard(sub_link: str, platform: str, add_step_guide_btn: bool = False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if platform == "android":
        builder.row(InlineKeyboardButton(
            text=app_conf.get('btn_download_android', 'üì• –°–∫–∞—á–∞—Ç—å'),
            url="https://play.google.com/store/apps/details?id=com.v2raytun.android"
        ))
    elif platform == "ios":
        builder.row(InlineKeyboardButton(
            text=app_conf.get('btn_download_ios', 'üì• –°–∫–∞—á–∞—Ç—å'),
            url="https://apps.apple.com/ru/app/v2raytun/id6476628951"
        ))
    
    if add_step_guide_btn:
        builder.row(InlineKeyboardButton(
            text='–Ø –Ω–æ–≤–∏—á–æ–∫, —Ö–æ—á—É –ø–æ —à–∞–≥–∞–º',
            callback_data='start_step_guide'
        ))
    
    builder.row(InlineKeyboardButton(
        text=app_conf.get('btn_back_to_main', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'),
        callback_data="back_to_main"
    ))
    return builder.as_markup()

def get_about_service_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ —Å–µ—Ä–≤–∏—Å–µ"""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text=app_conf.get('btn_back_to_main', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'),
        callback_data="back_to_main"
    ))
    return builder.as_markup()

def get_renew_keyboard():
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        tariffs = loop.run_until_complete(get_active_tariffs())
        loop.close()
    except Exception:
        # Fallback –∫ —Å—Ç–∞—Ä—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        sub_days = app_conf.get('subscription_days', 30)
        sub_price = app_conf.get('subscription_price', 0.0)
        sub_currency = app_conf.get('subscription_currency', 'RUB')
        price_display = int(sub_price) if float(sub_price) == int(sub_price) else sub_price
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text=app_conf.get('btn_renew_sub', 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É').format(
                    days=sub_days,
                    price=price_display,
                    currency=sub_currency
                ),
                callback_data="renew_sub"
            )
        )
        return builder.as_markup()
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        builder = InlineKeyboardBuilder()
        for tariff in tariffs:
            price_display = int(tariff['price']) if tariff['price'].is_integer() else tariff['price']
            tariff_name = tariff['name'] if tariff['name'] else f"{tariff['days']} –¥–Ω–µ–π"
            
            builder.row(InlineKeyboardButton(
                text=f"üí≥ {tariff_name} - {price_display} {tariff['currency']}",
                callback_data=f"renew_sub_{tariff['days']}_{tariff['price']}"
            ))
        return builder.as_markup()

def get_step_guide_button():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text='–Ø –Ω–æ–≤–∏—á–æ–∫, —Ö–æ—á—É –ø–æ —à–∞–≥–∞–º',
        callback_data='start_step_guide'
    ))
    return builder.as_markup()

async def get_tariffs_keyboard():
    tariffs = await get_active_tariffs()
    buttons = []
    if tariffs:
        for tariff in tariffs:
            price_display = int(tariff['price']) if tariff['price'].is_integer() else tariff['price']
            tariff_name = tariff['name'] if tariff['name'] else f"{tariff['days']} –¥–Ω–µ–π"
            buttons.append([InlineKeyboardButton(
                text=f"üí≥ {tariff_name} - {price_display} {tariff['currency']}",
                callback_data=f"renew_sub_{tariff['days']}_{tariff['price']}"
            )])
    buttons.append([InlineKeyboardButton(
        text=app_conf.get('btn_back_to_main', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'),
        callback_data="back_to_main"
    )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)