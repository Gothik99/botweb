# admin.py
import asyncio
from datetime import datetime, timedelta, timezone
from typing import Optional, List, Dict
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
import random
import string
import os

from app_config import app_conf # –ì–ª–∞–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç
import db_helpers
from x_ui_manager import xui_manager_instance
from loguru import logger
from subscription_manager import get_subscription_link, grant_subscription

class AdminStates(StatesGroup):
    waiting_for_user_id_add_sub = State()
    waiting_for_days_add_sub = State()
    waiting_for_user_id_del_sub = State()
    waiting_for_user_id_info = State()
    waiting_for_user_id_delete = State()
    waiting_for_user_id_subscription = State()
    waiting_for_broadcast_message = State()
    waiting_for_renewal_broadcast = State()
    waiting_for_renewal_period = State()
    waiting_for_renewal_price = State()

def is_admin(user_id: int) -> bool:
    admin_ids = app_conf.get('admin_ids', [])
    return user_id in admin_ids

def get_admin_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users_menu"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_overview")
    )
    builder.row(
        InlineKeyboardButton(text="üñ• –°–µ—Ä–≤–µ—Ä—ã", callback_data="admin_servers_status")
    )
    builder.row(
        InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data="admin_broadcast")
    )
    # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    builder.row(
        InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_reload_settings")
    )
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
    builder.row(
        InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")
    )
    return builder.as_markup()
    
def get_admin_promo_codes_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_promo_create"),
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤", callback_data="admin_promo_list_all_0")
    )
    builder.row(
        InlineKeyboardButton(text="üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–æ–¥—ã", callback_data="admin_promo_export")
    )
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel_main"))
    return builder.as_markup()

def get_promo_codes_list_keyboard(current_page: int, total_pages: int, status: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    filter_buttons = [
        InlineKeyboardButton(text="–í—Å–µ" + (" ‚úÖ" if status == 'all' else ""), callback_data="admin_promo_list_all_0"),
        InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ" + (" ‚úÖ" if status == 'active' else ""), callback_data="admin_promo_list_active_0"),
        InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ" + (" ‚úÖ" if status == 'inactive' else ""), callback_data="admin_promo_list_inactive_0")
    ]
    builder.row(*filter_buttons)
    
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"admin_promo_list_{status}_{current_page-1}"))
    
    page_info_text = "–°—Ç—Ä–∞–Ω–∏—Ü–∞"
    if total_pages > 1:
        page_info_text = f"üìÑ {current_page+1}/{total_pages}"
    nav_buttons.append(InlineKeyboardButton(text=page_info_text, callback_data="admin_ignore"))

    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"admin_promo_list_{status}_{current_page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="admin_promo_codes_menu"))
    return builder.as_markup()

def get_admin_users_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list_page_0"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel_main"))
    return builder.as_markup()

def get_users_list_keyboard(current_page: int, total_pages: int, per_page: int, users_data: List[tuple]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for user_tuple in users_data:
        telegram_id = user_tuple[0]
        builder.row(InlineKeyboardButton(text=f"üë§ –ò–Ω—Ñ–æ –æ {telegram_id}", callback_data=f"admin_user_info_{telegram_id}"))
    
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=f"admin_users_list_page_{current_page-1}"))
    
    page_info_text = "–°—Ç—Ä–∞–Ω–∏—Ü–∞"
    if total_pages > 1:
         page_info_text = f"üìÑ {current_page+1}/{total_pages}"
    nav_buttons.append(InlineKeyboardButton(text=page_info_text, callback_data="admin_ignore"))

    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=f"admin_users_list_page_{current_page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_menu"))
    return builder.as_markup()

async def get_users_list_text_and_keyboard(page: int = 0, per_page: int = 5) -> tuple[str, InlineKeyboardMarkup]:
    total_users_count = await db_helpers.get_users_count()
    if total_users_count == 0:
        return "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.", get_users_list_keyboard(0, 0, per_page, [])

    total_pages = (total_users_count + per_page - 1) // per_page
    page = min(max(0, page), total_pages - 1)
    
    users_data = await db_helpers.get_users_list(limit=per_page, offset=page * per_page)
    
    text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}):</b>\n\n"
    
    if not users_data:
        text += "–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        trial_days = app_conf.get('trial_days', 3)
        for user_tuple in users_data:
            telegram_id, username, sub_end_date_str, is_trial_used, server_id = user_tuple
            status_emoji = "‚ùå"
            sub_info = "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
            if sub_end_date_str:
                try:
                    sub_end_date = datetime.fromisoformat(sub_end_date_str)
                    
                    # --- –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å—Ç–∞—Ä—ã–º –¥–∞–Ω–Ω—ã–º ---
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ë–î "–Ω–∞–∏–≤–Ω–∞—è" (–±–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã), –¥–µ–ª–∞–µ–º –µ–µ "aware",
                    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
                    if sub_end_date.tzinfo is None:
                        sub_end_date = sub_end_date.astimezone()
                    # ------------------------------------

                    now_aware = datetime.now(sub_end_date.tzinfo)
                    if sub_end_date > now_aware:
                        status_emoji = "‚úÖ"
                        sub_info = f"–¥–æ {sub_end_date.strftime('%d.%m.%y %H:%M')}"
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏–º —Ç—Ä–∏–∞–ª–æ–º
                        # –î–ª—è —ç—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º aware-–¥–∞—Ç—ã
                        if is_trial_used and (sub_end_date - now_aware).days < trial_days + 1:
                            status_emoji = "üéÅ"
                    else:
                        sub_info = f"–∏—Å—Ç–µ–∫–ª–∞ {sub_end_date.strftime('%d.%m.%y')}"
                except ValueError:
                    sub_info = "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã"
            
            username_display = username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            server_info = f"Srv: {server_id}" if server_id else "Srv: -"
            
            text += f"üë§ <code>{telegram_id}</code> - {username_display}\n"
            text += f"   {status_emoji} {sub_info} ({server_info})\n\n"
    
    text += f"\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users_count}"
    keyboard = get_users_list_keyboard(page, total_pages, per_page, users_data)
    
    return text, keyboard

async def cmd_admin_panel(message_or_query: Message | CallbackQuery):
    user_id = message_or_query.from_user.id
    if not is_admin(user_id):
        if isinstance(message_or_query, Message):
            await message_or_query.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        elif isinstance(message_or_query, CallbackQuery):
            await message_or_query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    kbd = get_admin_keyboard()

    if isinstance(message_or_query, Message):
        await message_or_query.answer(text, reply_markup=kbd)
    elif isinstance(message_or_query, CallbackQuery):
        try:
            await message_or_query.message.edit_text(text, reply_markup=kbd)
            await message_or_query.answer()
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ cmd_admin_panel: {e}")
            await message_or_query.answer()

async def get_overall_stats_text() -> str:
    total_users = await db_helpers.get_total_users_count()
    active_subs = await db_helpers.get_active_subscriptions_count()
    trial_users = await db_helpers.get_trial_users_count()
    total_payments = await db_helpers.get_total_payments_count()
    successful_payments = await db_helpers.get_successful_payments_count()
    total_amount = await db_helpers.get_total_payments_amount()
    activated_promo_codes = await db_helpers.get_activated_promo_codes_count()

    servers_summary = []
    active_servers_count = 0
    total_xui_clients = 0
    xui_servers = app_conf.get('xui_servers', [])

    if not xui_servers:
        servers_summary.append("–ù–µ—Ç —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö X-UI —Å–µ—Ä–≤–µ—Ä–æ–≤.")
    else:
        for server_conf in xui_servers:
            try:
                api_client = await xui_manager_instance.get_client(server_conf)
                if api_client:
                    num_clients = await xui_manager_instance.get_active_clients_count_for_inbound(server_conf)
                    num_clients_str = str(num_clients) if num_clients is not None else "N/A"
                    servers_summary.append(f"  - {server_conf['name']}: ‚úÖ –û–Ω–ª–∞–π–Ω, –∫–ª–∏–µ–Ω—Ç—ã: {num_clients_str}")
                    active_servers_count += 1
                    if num_clients is not None: total_xui_clients += num_clients
                else:
                    servers_summary.append(f"  - {server_conf['name']}: ‚ùå –û—Ñ—Ñ–ª–∞–π–Ω")
            except Exception as e:
                servers_summary.append(f"  - {server_conf['name']}: ‚ö†Ô∏è –û—à–∏–±–∫–∞ ({e})")
    
    servers_text = "\n".join(servers_summary)

    return (
        "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"  üë• –í—Å–µ–≥–æ: {total_users}\n"
        f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–≤ –ë–î): {active_subs}\n"
        f"  üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç—Ä–∏–∞–ª: {trial_users}\n"
        f"  üéüÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {activated_promo_codes}\n\n"
        f"<b>–ü–ª–∞—Ç–µ–∂–∏:</b>\n"
        f"  üí≥ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_payments}\n"
        f"  üí∏ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_payments}\n"
        f"  üí∞ –û–±—â–∞—è —Å—É–º–º–∞ (—É—Å–ø–µ—à–Ω—ã—Ö): {total_amount:.2f} {app_conf.get('subscription_currency', 'RUB')}\n\n"
        f"<b>–°–µ—Ä–≤–µ—Ä—ã X-UI ({active_servers_count}/{len(xui_servers)} –æ–Ω–ª–∞–π–Ω):</b>\n"
        f"{servers_text}\n"
        f"  Œ£ –ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ X-UI (–∞–∫—Ç–∏–≤–Ω—ã—Ö): {total_xui_clients}"
    )

async def get_server_detailed_status_text() -> str:
    status_text = "üñ• <b>–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ X-UI:</b>\n\n"
    xui_servers = app_conf.get('xui_servers', [])
    if not xui_servers:
        return status_text + "–ù–µ—Ç —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö X-UI —Å–µ—Ä–≤–µ—Ä–æ–≤."

    for server_conf in xui_servers:
        try:
            status_text += f"<b>üìç –°–µ—Ä–≤–µ—Ä: {server_conf.get('name', 'N/A')} (ID: {server_conf.get('id', 'N/A')})</b>\n"
            if not all(key in server_conf for key in ['url', 'port']):
                status_text += "  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç url –∏–ª–∏ port\n\n"
                continue

            try:
                stats = await xui_manager_instance.get_server_stats(server_conf)
                if stats:
                    xui_url = f"https://{server_conf['url']}:{server_conf['port']}"
                    if server_conf.get('secret_path'):
                        xui_url += f"/{server_conf['secret_path'].strip('/')}"
                    status_text += (
                        f"  –°—Ç–∞—Ç—É—Å: ‚úÖ –û–Ω–ª–∞–π–Ω\n"
                        f"  CPU: {stats.get('cpu_usage', 'N/A')}%\n" 
                        f"  RAM: {stats.get('memory_usage', 'N/A')}%\n"
                        f"  –î–∏—Å–∫: {stats.get('disk_usage', 'N/A')}%\n"
                        f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats.get('active_users', 'N/A')}\n"
                        f"  X-UI –ø–∞–Ω–µ–ª—å: <a href='{xui_url}'>{xui_url}</a>\n\n"
                    )
                else:
                    status_text += "  –°—Ç–∞—Ç—É—Å: ‚ùå –û—Ñ—Ñ–ª–∞–π–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_conf.get('name', 'Unknown')}: {str(e)}")
                status_text += f"  –°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n\n"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server_conf.get('name', 'Unknown')}: {str(e)}")
            status_text += f"  –°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}\n\n"
    
    return status_text

async def get_user_info_text(user_id: int) -> str:
    user_data = await db_helpers.get_user(user_id)
    if not user_data:
        return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞."
    
    tg_id, u_name, uuid, email, sub_end_str, trial_used, srv_id, *_ = user_data
    text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b> <code>{tg_id}</code>\n"
        f"–ò–º—è: {u_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if trial_used else '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}\n"
    )

    activated_code = await db_helpers.get_activated_code_for_user(tg_id)
    if activated_code:
        text += f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥: <code>{activated_code}</code>\n"
    text += "\n"

    active_sub_db = await db_helpers.get_active_subscription(tg_id)
    if uuid and email and sub_end_str and srv_id:
        text += f"üîë <b>–î–∞–Ω–Ω—ã–µ X-UI (–∏–∑ –ë–î):</b>\n"
        text += f"  UUID: <code>{uuid}</code>\n"
        text += f"  Email: <code>{email}</code>\n"
        text += f"  –°–µ—Ä–≤–µ—Ä ID: {srv_id}\n"
        
        sub_end_date_dt = datetime.fromisoformat(sub_end_str)
        status = "–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ" if active_sub_db else "–ò—Å—Ç–µ–∫–ª–∞/–ù–µ—Ç ‚ùå"
        text += f"  –ü–æ–¥–ø–∏—Å–∫–∞ (–≤ –ë–î): {status} –¥–æ {sub_end_date_dt.strftime('%d.%m.%Y %H:%M %Z')}\n"
        
        server_conf = await db_helpers.get_server_config(srv_id)
        if server_conf:
            sub_link = get_subscription_link(server_conf, uuid)
            text += f"  –°—Å—ã–ª–∫–∞: <code>{sub_link}</code>\n"
        text += "\n"
    elif active_sub_db:
        text += f"‚ö†Ô∏è –í –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ X-UI, –Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:\n"
        text += f"   UUID: <code>{active_sub_db.get('xui_client_uuid','N/A')}</code>\n"
        text += f"   Email: <code>{active_sub_db.get('xui_client_email','N/A')}</code>\n"
        text += f"   –°–µ—Ä–≤–µ—Ä ID: {active_sub_db.get('current_server_id','N/A')}\n"
        text += f"   –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {active_sub_db['subscription_end_date'].strftime('%d.%m.%Y %H:%M %Z')}\n\n"
    else:
        text += "ü§∑ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ X-UI –≤ –±–∞–∑–µ.\n\n"
        
    payments = await db_helpers.get_user_payments(tg_id)
    if payments:
        text += "üí≥ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):</b>\n"
        for p in payments[:5]:
            p_created_at = datetime.fromisoformat(p[5]).strftime('%d.%m.%y %H:%M')
            meta_short = "–î–∞" if p[6] else "–ù–µ—Ç"
            text += f"  - {p[0][:8]}.. ({p[2]} {p[3]}) –°—Ç–∞—Ç—É—Å: {p[4]}, –î–∞—Ç–∞: {p_created_at}, –ú–µ—Ç–∞: {meta_short}\n"
    else:
        text += "üí≥ –ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
        
    return text

def register_admin_handlers(dp: Dispatcher):
    
    # --- –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
    @dp.message(Command("reload_settings"))
    async def cmd_reload_settings_msg(message: Message):
        if not is_admin(message.from_user.id): return
        await app_conf.load_settings()
        await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–µ–∫—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")

    @dp.callback_query(F.data == "admin_reload_settings")
    async def cq_reload_settings(query: CallbackQuery):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        await app_conf.load_settings()
        await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–µ–∫—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        # –û–±–Ω–æ–≤–∏–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await cmd_admin_panel(query)
    
    @dp.message(Command("admin"))
    async def cmd_show_admin_panel_msg(message: Message):
        await cmd_admin_panel(message)

    @dp.callback_query(F.data == "admin_panel_main")
    async def cq_show_admin_panel_cb(query: CallbackQuery):
        await cmd_admin_panel(query)

    @dp.callback_query(F.data == "admin_stats_overview")
    async def cq_admin_stats_overview(query: CallbackQuery):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        stats_text = await get_overall_stats_text()
        await query.message.edit_text(stats_text, reply_markup=get_admin_keyboard())
        await query.answer()
    
    @dp.callback_query(F.data == "admin_servers_status")
    async def cq_admin_servers_status(query: CallbackQuery):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        try:
            status_text = await get_server_detailed_status_text()
            keyboard = get_admin_keyboard()
            await query.message.edit_text(text=status_text, reply_markup=keyboard, parse_mode="HTML")
            await query.answer()
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await query.answer("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ –∞–∫—Ç—É–∞–ª–µ–Ω")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    @dp.callback_query(F.data == "admin_users_menu")
    async def cq_admin_users_menu(query: CallbackQuery):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        await query.message.edit_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=get_admin_users_menu_keyboard())
        await query.answer()

    @dp.callback_query(F.data.startswith("admin_users_list_page_"))
    async def cq_admin_users_list_page(query: CallbackQuery):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        try:
            page = int(query.data.split("_")[-1])
        except: page = 0
        text, keyboard = await get_users_list_text_and_keyboard(page=page)
        await query.message.edit_text(text, reply_markup=keyboard)
        await query.answer()

    @dp.callback_query(F.data.startswith("admin_user_info_"))
    async def cq_admin_user_info_from_list(query: CallbackQuery, state: FSMContext):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        try: user_id = int(query.data.split("_")[-1])
        except (ValueError, IndexError): return await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        await state.clear()
        info_text = await get_user_info_text(user_id)
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list_page_0"))
        await query.message.edit_text(info_text, reply_markup=builder.as_markup())
        await query.answer()

    @dp.callback_query(F.data == "admin_promo_codes_menu")
    async def cq_admin_promo_codes_menu(query: CallbackQuery):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        await query.message.edit_text(app_conf.get('admin_text_promo_codes_menu', ''), reply_markup=get_admin_promo_codes_menu_keyboard())
        await query.answer()

    @dp.callback_query(F.data == "admin_promo_create")
    async def cq_admin_promo_create(query: CallbackQuery):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        chars = string.ascii_uppercase + string.digits
        while True:
            new_code = "BVPN-" + ''.join(random.choice(chars) for _ in range(8))
            if not await db_helpers.get_promo_code(new_code):
                break
        await db_helpers.add_promo_code(new_code)
        await query.message.edit_text(
            app_conf.get('admin_text_promo_code_created', '').format(code=new_code),
            reply_markup=get_admin_promo_codes_menu_keyboard()
        )
        await query.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!")

    @dp.callback_query(F.data.startswith("admin_promo_list_"))
    async def cq_admin_promo_list(query: CallbackQuery):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        parts = query.data.split('_')
        status = parts[3]
        try: page = int(parts[4])
        except (ValueError, IndexError): page = 0
            
        per_page = 10
        total_codes = await db_helpers.get_promo_codes_count(status)
        text = f"üéüÔ∏è <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Ñ–∏–ª—å—Ç—Ä: {status}, —Å—Ç—Ä. {page + 1})</b>\n\n"
        
        if total_codes == 0:
            text += "–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ —ç—Ç–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–µ—Ç."
            keyboard = get_promo_codes_list_keyboard(0, 0, status)
        else:
            total_pages = (total_codes + per_page - 1) // per_page
            page = min(max(0, page), total_pages - 1)
            codes_data = await db_helpers.get_promo_codes_list(status, per_page, page * per_page)
            for code, is_active, user_id, activated_at in codes_data:
                status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
                text += f"<code>{code}</code> - {status_text}\n"
                if not is_active and user_id:
                    try:
                        act_date = datetime.fromisoformat(activated_at).strftime('%d.%m.%y %H:%M')
                        text += f"   ‚îî –ö–µ–º: <code>{user_id}</code>, –∫–æ–≥–¥–∞: {act_date}\n"
                    except:
                        text += f"   ‚îî –ö–µ–º: <code>{user_id}</code>\n"
            text += f"\n–í—Å–µ–≥–æ –∫–æ–¥–æ–≤: {total_codes}"
            keyboard = get_promo_codes_list_keyboard(page, total_pages, status)
            
        await query.message.edit_text(text, reply_markup=keyboard)
        await query.answer()

    @dp.callback_query(F.data == "admin_promo_export")
    async def cq_admin_promo_export(query: CallbackQuery):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        try:
            codes_data = await db_helpers.get_promo_codes_list('all', 1000, 0)
            if not codes_data:
                return await query.answer("‚ùå –ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏", show_alert=True)

            filename = f"promo_codes_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            file_content = "=== –ü—Ä–æ–º–æ–∫–æ–¥—ã ===\n\n"
            for code, is_active, user_id, activated_at in codes_data:
                status = "–ê–∫—Ç–∏–≤–µ–Ω" if is_active else "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
                file_content += f"–ö–æ–¥: {code}\n"
                file_content += f"–°—Ç–∞—Ç—É—Å: {status}\n"
                if not is_active and user_id:
                    try:
                        act_date = datetime.fromisoformat(activated_at).strftime('%d.%m.%y %H:%M')
                        file_content += f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {user_id} ({act_date})\n"
                    except:
                        file_content += f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {user_id}\n"
                file_content += "\n"
            with open(filename, 'w', encoding='utf-8') as f: f.write(file_content)
            try:
                await query.message.answer_document(document=FSInputFile(filename), caption="üì• –í—ã–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
                await query.answer("‚úÖ –§–∞–π–ª —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            finally:
                if os.path.exists(filename): os.remove(filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)

    @dp.message(Command("cancel"), StateFilter(AdminStates))
    async def cancel_admin_action(message: Message, state: FSMContext):
        if not is_admin(message.from_user.id): return
        current_state = await state.get_state()
        if current_state is None: return
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=get_admin_keyboard())

    @dp.callback_query(F.data == "admin_ignore")
    async def cq_admin_ignore(query: CallbackQuery):
        await query.answer()

    @dp.callback_query(F.data.startswith("admin_user_info_"))
    async def cq_admin_user_info_from_list(query: CallbackQuery):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        try: user_id = int(query.data.split("_")[-1])
        except ValueError: return await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        info_text = await get_user_info_text(user_id)
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_menu"),
            InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_main")
        )
        await query.message.edit_text(info_text, reply_markup=builder.as_markup())
        await query.answer()

    @dp.callback_query(F.data == "admin_broadcast")
    async def cq_admin_broadcast(query: CallbackQuery, state: FSMContext):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        await query.message.edit_text(
            "üì¢ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏...",
            reply_markup=InlineKeyboardBuilder().button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_broadcast").as_markup()
        )
        await state.set_state(AdminStates.waiting_for_broadcast_message)
        await query.answer()

    @dp.callback_query(F.data == "admin_cancel_broadcast")
    async def cq_admin_cancel_broadcast(query: CallbackQuery, state: FSMContext):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        await state.clear()
        await query.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=InlineKeyboardBuilder().button(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_main").as_markup())
        await query.answer()

    @dp.message(AdminStates.waiting_for_broadcast_message)
    async def process_broadcast_message(message: Message, state: FSMContext):
        if not is_admin(message.from_user.id): return
        if message.text == "/cancel":
            await state.clear()
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=InlineKeyboardBuilder().button(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_main").as_markup())
            return

        users = await db_helpers.get_all_users()
        total_users = len(users)
        if total_users == 0:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏")
            await state.clear()
            return

        status_message = await message.answer(f"üì¢ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–∏ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        success_count, error_count = 0, 0
        for user in users:
            user_id = user[0]
            username = user[1]
            try:
                await message.bot.send_message(chat_id=user_id, text=message.text, parse_mode="HTML")
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                error_count += 1
            await asyncio.sleep(0.05)
        
        await status_message.edit_text(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n‚ùå –û—à–∏–±–æ–∫: {error_count}", reply_markup=InlineKeyboardBuilder().button(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_main").as_markup())
        await state.clear()

    @dp.callback_query(F.data == "admin_renewal_broadcast")
    async def cq_admin_renewal_broadcast(query: CallbackQuery, state: FSMContext):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        await query.message.edit_text("üéÅ <b>–ù–æ–≤–æ—Å—Ç—å –æ —Å–∫–∏–¥–∫–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä., 30):", reply_markup=InlineKeyboardBuilder().button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_renewal_broadcast").as_markup())
        await state.set_state(AdminStates.waiting_for_renewal_period)
        await query.answer()

    @dp.message(AdminStates.waiting_for_renewal_period)
    async def process_renewal_period(message: Message, state: FSMContext):
        if not is_admin(message.from_user.id): return
        if message.text == "/cancel":
            await state.clear()
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=InlineKeyboardBuilder().button(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_main").as_markup())
            return
        try:
            days = int(message.text.strip())
            if days <= 0: raise ValueError("–î–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å > 0")
            await state.update_data(renewal_days=days)
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ {days} –¥–Ω–µ–π (–Ω–∞–ø—Ä., 299):", reply_markup=InlineKeyboardBuilder().button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_renewal_broadcast").as_markup())
            await state.set_state(AdminStates.waiting_for_renewal_price)
        except ValueError as e:
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {e}", reply_markup=InlineKeyboardBuilder().button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_renewal_broadcast").as_markup())

    @dp.message(AdminStates.waiting_for_renewal_price)
    async def process_renewal_price(message: Message, state: FSMContext):
        if not is_admin(message.from_user.id): return
        if message.text == "/cancel":
            await state.clear()
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=InlineKeyboardBuilder().button(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_main").as_markup())
            return
        try:
            price = float(message.text.strip().replace(',', '.'))
            if price <= 0: raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
            data = await state.get_data()
            days = data['renewal_days']
            await message.answer(f"üéÅ <b>–ù–æ–≤–æ—Å—Ç—å –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏</b>\n\n–ü–µ—Ä–∏–æ–¥: {days} –¥–Ω.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price:.2f} —Ä—É–±.\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏...", reply_markup=InlineKeyboardBuilder().button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_renewal_broadcast").as_markup())
            await state.update_data(renewal_price=price)
            await state.set_state(AdminStates.waiting_for_renewal_broadcast)
        except ValueError as e:
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {e}", reply_markup=InlineKeyboardBuilder().button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_renewal_broadcast").as_markup())

    @dp.message(AdminStates.waiting_for_renewal_broadcast)
    async def process_renewal_broadcast_message(message: Message, state: FSMContext):
        if not is_admin(message.from_user.id): return
        if message.text == "/cancel":
            await state.clear()
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=InlineKeyboardBuilder().button(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_main").as_markup())
            return

        data = await state.get_data()
        days, price = data['renewal_days'], data['renewal_price']
        broadcast_text = message.text.replace('{days}', str(days)).replace('{price}', f"{price:.2f}")

        users = await db_helpers.get_all_users()
        total_users = len(users)
        if total_users == 0:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            await state.clear()
            return

        status_message = await message.answer(f"üéÅ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–∏ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        renewal_keyboard = InlineKeyboardBuilder()
        renewal_keyboard.row(InlineKeyboardButton(text=f"üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ {days} –¥–Ω–µ–π –∑–∞ {price:.2f} —Ä—É–±.", callback_data=f"renew_sub_{days}_{price}"))

        success_count, error_count = 0, 0
        for user in users:
            user_id = user[0]
            username = user[1]
            try:
                await message.bot.send_message(chat_id=user_id, text=broadcast_text, parse_mode="HTML", reply_markup=renewal_keyboard.as_markup())
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                error_count += 1
            await asyncio.sleep(0.05)

        await status_message.edit_text(f"üéÅ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n‚ùå –û—à–∏–±–æ–∫: {error_count}", reply_markup=InlineKeyboardBuilder().button(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_main").as_markup())
        await state.clear()

    @dp.callback_query(F.data == "admin_cancel_renewal_broadcast")
    async def cq_admin_cancel_renewal_broadcast(query: CallbackQuery, state: FSMContext):
        if not is_admin(query.from_user.id): return await query.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        await state.clear()
        await query.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=InlineKeyboardBuilder().button(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel_main").as_markup())
        await query.answer()