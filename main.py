# main.py
# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ —á–µ—Ä–µ–∑ X-UI –∏ YooKassa

import asyncio
import logging
import os
from datetime import datetime, timedelta, timezone 
import uuid as py_uuid
import json
from typing import Optional, Dict
import pytz

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ aiogram –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, StateFilter
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.markdown import hcode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramForbiddenError, TelegramNotFound, TelegramAPIError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º YooKassa –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
from yookassa import Configuration as YKConfig, Payment as YKPayment
from yookassa.domain.request.payment_request_builder import PaymentRequestBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from app_config import app_conf # –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
import keyboards # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram
import db_helpers # –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from x_ui_manager import xui_manager_instance # –†–∞–±–æ—Ç–∞ —Å X-UI
import admin # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from subscription_manager import grant_subscription, get_subscription_link, get_server_config

from loguru import logger
import aiosqlite

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot_token = os.getenv("BOT_TOKEN", app_conf.get('bot_token', ''))
bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage, bot=bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
active_payment_checkers = {}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è aiogram ---
class PromoCodeActivation(StatesGroup):
    waiting_for_code = State()

class StepByStepGuide(StatesGroup):
    step1 = State()
    step2 = State()
    step3 = State()
    step4 = State()
    step5 = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def process_successful_payment(telegram_user_id: int, payment_id: str, payment_metadata: Optional[dict] = None):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
    db_payment_info = await db_helpers.get_payment(payment_id)
    if db_payment_info and db_payment_info[4] == "succeeded":
        logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ 'succeeded'.")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—â–µ —Ä–∞–∑
        active_sub = await db_helpers.get_active_subscription(telegram_user_id)
        if active_sub:
            server_conf = await get_server_config(active_sub['current_server_id'])
            sub_link = "N/A"
            if server_conf and active_sub['xui_client_uuid']:
                sub_link = get_subscription_link(server_conf, active_sub['xui_client_uuid'])
            
            days_paid = app_conf.get('subscription_days', 30)
            if payment_metadata and 'subscription_days' in payment_metadata:
                days_paid = payment_metadata['subscription_days']

            expiry_date = active_sub['subscription_end_date']
            moscow = pytz.timezone('Europe/Moscow')
            local_expiry_date = expiry_date.astimezone(moscow) if expiry_date.tzinfo else expiry_date
            await bot.send_message(
                telegram_user_id,
                app_conf.get('text_payment_success').format(
                    days=days_paid, expiry_date=local_expiry_date.strftime('%d.%m.%Y %H:%M %Z'),
                    sub_link=hcode(sub_link) if sub_link != "N/A" else sub_link
                ),
                reply_markup=keyboards.get_back_to_main_keyboard()
            )
        return True

    await db_helpers.update_payment_status(payment_id, "succeeded")
    
    days_to_add = app_conf.get('subscription_days', 30)
    price_to_use = None
    limit_ip = 0
    if payment_metadata and 'subscription_days' in payment_metadata:
        days_to_add = payment_metadata['subscription_days']
        price_to_use = float(payment_metadata.get('price', 0)) if 'price' in payment_metadata else None
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ —Ç–∞—Ä–∏—Ñ–∞
        active_tariffs = await db_helpers.get_active_tariffs()
        if price_to_use is not None:
            for tariff in active_tariffs:
                if tariff['days'] == days_to_add and float(tariff['price']) == price_to_use:
                    limit_ip = tariff.get('limit_ip', 0)
                    break
        else:
            for tariff in active_tariffs:
                if tariff['days'] == days_to_add:
                    limit_ip = tariff.get('limit_ip', 0)
                    break
    
    subscription_data = await grant_subscription(telegram_user_id, days_to_add, is_trial=False, limit_ip=limit_ip)
    
    if subscription_data:
        moscow = pytz.timezone('Europe/Moscow')
        local_expiry_date = subscription_data['expiry_date'].astimezone(moscow)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
        await bot.send_message(
            telegram_user_id,
            app_conf.get('text_payment_success').format(
                days=days_to_add, expiry_date=local_expiry_date.strftime('%d.%m.%Y %H:%M %Z'),
                sub_link=hcode(subscription_data['sub_link'])
            ),
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        
        return True
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        await bot.send_message(telegram_user_id, app_conf.get('text_error_creating_user'))
        return False

async def show_main_menu(message_or_query: Message | CallbackQuery, edit_message: bool = False):
    user_id = message_or_query.from_user.id
    user_name = message_or_query.from_user.first_name

    await db_helpers.add_user(user_id, user_name) 
    user_db_data = await db_helpers.get_user(user_id)
    
    active_sub = await db_helpers.get_active_subscription(user_id)
    has_active_sub = active_sub is not None
    is_trial_used = bool(user_db_data[5]) if user_db_data else True 

    kbd = await keyboards.get_main_keyboard(not is_trial_used and not has_active_sub, has_active_sub)

    text_to_send = app_conf.get('text_welcome_message').format(user_name=user_name, project_name=app_conf.get('project_name'))
    
    if active_sub:
        server_conf = await get_server_config(active_sub['current_server_id'])
        sub_link = "N/A"
        if server_conf and active_sub['xui_client_uuid']:
            sub_link = get_subscription_link(server_conf, active_sub['xui_client_uuid'])

        expiry_date = active_sub['subscription_end_date']
        moscow = pytz.timezone('Europe/Moscow')
        local_expiry_date = expiry_date.astimezone(moscow) if expiry_date.tzinfo else expiry_date
        text_to_send += "\n\n" + app_conf.get('text_subscription_info').format(
            status="–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ", expiry_date=local_expiry_date.strftime('%d.%m.%Y %H:%M %Z'),
            sub_link=hcode(sub_link) if sub_link != "N/A" else sub_link
        )

        # –õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ç–µ–ø–µ—Ä—å –∏–∑ –ë–î
        limit_ip = active_sub.get('limit_ip', 0) if isinstance(active_sub, dict) else 0
        text_to_send += f"\n\n<b>–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b> {limit_ip if limit_ip > 0 else '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}"
    elif is_trial_used and not has_active_sub:
         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
         text_to_send += "\n\n" + app_conf.get('text_subscription_expired_main')
    elif not is_trial_used and not has_active_sub:
        text_to_send += "\n\n" + "üéÅ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –µ–≥–æ, –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É."

    target_message = message_or_query.message if isinstance(message_or_query, CallbackQuery) else message_or_query
    
    if edit_message and isinstance(message_or_query, CallbackQuery):
        try:
            await target_message.edit_text(text_to_send, reply_markup=kbd)
        except Exception as e:
            if "message is not modified" not in str(e).lower():
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}: {e}. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ.")
                await bot.send_message(user_id, text_to_send, reply_markup=kbd)
    else:
        await target_message.answer(text_to_send, reply_markup=kbd)

    if isinstance(message_or_query, CallbackQuery):
        try: await message_or_query.answer()
        except: pass

@dp.message(CommandStart())
async def handle_start(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({message.from_user.username}) –Ω–∞–∂–∞–ª /start")
    await db_helpers.add_user(message.from_user.id, message.from_user.first_name)
    user_db_data = await db_helpers.get_user(message.from_user.id)
    
    is_trial_used = bool(user_db_data[5]) if user_db_data else True
    active_sub = await db_helpers.get_active_subscription(message.from_user.id)
    
    if not is_trial_used and not active_sub:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–¥–∞—Ç—å —Ç—Ä–∏–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        waiting_msg = await message.answer("‚è≥ –ò–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        trial_days = app_conf.get('trial_days', 3)
        # limit_ip=1 –¥–ª—è —Ç—Ä–∏–∞–ª–∞
        subscription_data = await grant_subscription(message.from_user.id, trial_days, is_trial=True, limit_ip=1)
        
        if subscription_data:
            moscow = pytz.timezone('Europe/Moscow')
            local_expiry_date = subscription_data['expiry_date'].astimezone(moscow)
            await waiting_msg.edit_text(
                app_conf.get('text_trial_success').format(
                    days=trial_days, sub_link=hcode(subscription_data['sub_link']),
                    expiry_date=local_expiry_date.strftime('%d.%m.%Y %H:%M %Z')
                ),
                reply_markup=keyboards.get_back_to_main_keyboard()
            )
            return 
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π XUI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {message.from_user.id} –ø—Ä–∏ /start")
            await waiting_msg.edit_text(app_conf.get('text_error_creating_user'), reply_markup=keyboards.get_back_to_main_keyboard())
    
    await show_main_menu(message)

@dp.callback_query(F.data == "back_to_main")
async def cq_back_to_main(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await show_main_menu(query, edit_message=True)

@dp.callback_query(F.data == "android_guide")
async def cq_android_guide(query: CallbackQuery):
    active_sub = await db_helpers.get_active_subscription(query.from_user.id)
    sub_link = "–í–ê–®–ê_–°–°–´–õ–ö–ê_–ë–£–î–ï–¢_–ó–î–ï–°–¨_–ü–û–°–õ–ï_–ê–ö–¢–ò–í–ê–¶–ò–ò_–ü–û–î–ü–ò–°–ö–ò"
    if active_sub:
        server_conf = await get_server_config(active_sub['current_server_id'])
        if server_conf and active_sub['xui_client_uuid']:
            sub_link = get_subscription_link(server_conf, active_sub['xui_client_uuid'])
    
    await query.message.edit_text(
        app_conf.get('text_android_guide').format(sub_link=hcode(sub_link)),
        reply_markup=keyboards.get_guide_keyboard(sub_link, "android", add_step_guide_btn=True),
        disable_web_page_preview=True
    )
    await query.answer()

@dp.callback_query(F.data == "ios_guide")
async def cq_ios_guide(query: CallbackQuery):
    active_sub = await db_helpers.get_active_subscription(query.from_user.id)
    sub_link = "–í–ê–®–ê_–°–°–´–õ–ö–ê_–ë–£–î–ï–¢_–ó–î–ï–°–¨_–ü–û–°–õ–ï_–ê–ö–¢–ò–í–ê–¶–ò–ò_–ü–û–î–ü–ò–°–ö–ò"
    if active_sub:
        server_conf = await get_server_config(active_sub['current_server_id'])
        if server_conf and active_sub['xui_client_uuid']:
            sub_link = get_subscription_link(server_conf, active_sub['xui_client_uuid'])
    
    await query.message.edit_text(
        app_conf.get('text_ios_guide').format(sub_link=hcode(sub_link)),
        reply_markup=keyboards.get_guide_keyboard(sub_link, "ios", add_step_guide_btn=True),
        disable_web_page_preview=True
    )
    await query.answer()

@dp.callback_query(F.data == "about_service")
async def cq_about_service(query: CallbackQuery):
    await query.message.edit_text(
        app_conf.get('text_about_service').format(project_name=app_conf.get('project_name')),
        reply_markup=keyboards.get_about_service_keyboard()
    )
    await query.answer()

async def auto_check_payment_status(payment_id: str, user_id: int, payment_metadata: dict):
    start_time = datetime.now(timezone.utc)
    max_duration = timedelta(minutes=5)
    poll_interval = 30
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    try:
        while datetime.now(timezone.utc) - start_time < max_duration:
            db_payment_info = await db_helpers.get_payment(payment_id)
            if not db_payment_info or db_payment_info[4] != "pending":
                logger.info(f"–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: –ü–ª–∞—Ç–µ–∂ {payment_id} –±–æ–ª—å—à–µ –Ω–µ 'pending'. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                return

            try:
                payment_info_yk = YKPayment.find_one(payment_id)
            except Exception as e:
                logger.error(f"–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: –û—à–∏–±–∫–∞ API Yookassa –¥–ª—è {payment_id}: {e}")
                await asyncio.sleep(poll_interval * 2)
                continue

            if not payment_info_yk:
                await asyncio.sleep(poll_interval)
                continue
            
            if payment_info_yk.status == "succeeded":
                logger.info(f"–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: –ü–ª–∞—Ç–µ–∂ {payment_id} –£–°–ü–ï–®–ï–ù!")
                await process_successful_payment(user_id, payment_id, payment_metadata)
                return 
            
            elif payment_info_yk.status == "canceled":
                logger.info(f"–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: –ü–ª–∞—Ç–µ–∂ {payment_id} –û–¢–ú–ï–ù–ï–ù.")
                await db_helpers.update_payment_status(payment_id, "canceled")
                try: 
                    await bot.send_message(user_id, app_conf.get('text_payment_canceled_or_failed'), reply_markup=keyboards.get_back_to_main_keyboard())
                except Exception as send_err:
                    logger.error(f"–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {user_id} –æ–± –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞: {send_err}")
                return 

            await asyncio.sleep(poll_interval)
        
        logger.warning(f"–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}. –û—Å—Ç–∞–ª—Å—è 'pending'.")

    finally:
        if payment_id in active_payment_checkers: del active_payment_checkers[payment_id]
        logger.info(f"–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@dp.callback_query(F.data == "activate_promo_code_prompt")
async def cq_activate_promo_code_prompt(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(app_conf.get('text_promo_code_prompt'), reply_markup=keyboards.get_back_to_main_keyboard())
    await state.set_state(PromoCodeActivation.waiting_for_code)
    await query.answer()

@dp.message(PromoCodeActivation.waiting_for_code)
async def process_promo_code_activation(message: Message, state: FSMContext):
    await state.clear()
    code = message.text.strip().upper()
    promo_data = await db_helpers.get_promo_code(code)

    if not promo_data:
        return await message.answer(app_conf.get('text_promo_code_invalid'), reply_markup=keyboards.get_back_to_main_keyboard())
    if not promo_data[1]: # is_active
        return await message.answer(app_conf.get('text_promo_code_already_used'), reply_markup=keyboards.get_back_to_main_keyboard())

    # promo_data: (code, is_active, activated_by_telegram_id, activated_at, created_at, days)
    days_to_add = promo_data[5] if len(promo_data) > 5 and promo_data[5] else app_conf.get('promo_code_subscription_days', 30)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db_helpers.get_active_subscription(message.from_user.id)
    current_limit_ip = user.get('limit_ip', 0) if user else 0
    subscription_data = await grant_subscription(message.from_user.id, days_to_add, is_trial=False, limit_ip=current_limit_ip)

    if subscription_data:
        await db_helpers.activate_promo_code(code, message.from_user.id)
        moscow = pytz.timezone('Europe/Moscow')
        local_expiry_date = subscription_data['expiry_date'].astimezone(moscow)
        await message.answer(
            app_conf.get('text_promo_code_success').format(
                code=code, days=days_to_add, expiry_date=local_expiry_date.strftime('%d.%m.%Y %H:%M %Z')
            ),
            reply_markup=keyboards.get_back_to_main_keyboard()
        )
        await show_main_menu(message)
    else:
        await message.answer(app_conf.get('text_error_creating_user'), reply_markup=keyboards.get_back_to_main_keyboard())

@dp.callback_query(F.data.startswith("check_payment_"))
async def cq_check_payment(query: CallbackQuery):
    payment_id = query.data.split("_")[2]
    await query.answer(app_conf.get('text_payment_checking'), show_alert=False)

    payment_db_data = await db_helpers.get_payment(payment_id)
    payment_metadata_from_db = json.loads(payment_db_data[6]) if payment_db_data and payment_db_data[6] else None

    try:
        payment_info_yk = YKPayment.find_one(payment_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ Yookassa –¥–ª—è {payment_id}: {e}")
        return await query.answer(app_conf.get('text_error_general') + " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    if not payment_info_yk:
        return await query.message.edit_text(app_conf.get('text_payment_not_found'), reply_markup=keyboards.get_back_to_main_keyboard())

    if payment_info_yk.status == "succeeded":
        await process_successful_payment(query.from_user.id, payment_id, payment_metadata_from_db)
    elif payment_info_yk.status == "pending":
        await query.answer(app_conf.get('text_payment_pending'), show_alert=True) 
    elif payment_info_yk.status in ["canceled", "failed"]:
        await db_helpers.update_payment_status(payment_id, "canceled")
        await query.message.edit_text(app_conf.get('text_payment_canceled_or_failed'), reply_markup=keyboards.get_back_to_main_keyboard())

@dp.callback_query(F.data.startswith("renew_sub"))
async def cq_renew_subscription(query: CallbackQuery):
    user_id = query.from_user.id
    idempotence_key = str(py_uuid.uuid4())

    parts = query.data.split('_')
    is_custom_renewal = len(parts) == 4 # renew_sub_days_price
    
    if is_custom_renewal:
        try:
            days = int(parts[2])
            price = float(parts[3])
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –∏ –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
            active_tariffs = await db_helpers.get_active_tariffs()
            currency = app_conf.get('subscription_currency', 'RUB')  # fallback
            limit_ip = 0
            for tariff in active_tariffs:
                if tariff['days'] == days and tariff['price'] == price:
                    currency = tariff['currency']
                    limit_ip = tariff.get('limit_ip', 0)
                    break
        except (ValueError, IndexError):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {query.data}")
            return await query.answer("–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∫–Ω–æ–ø–∫–∏", show_alert=True)
    else:
        days = app_conf.get('subscription_days', 30)
        price = app_conf.get('subscription_price', 0.0)
        currency = app_conf.get('subscription_currency', 'RUB')
        limit_ip = 0
        active_tariffs = await db_helpers.get_active_tariffs()
        for tariff in active_tariffs:
            if tariff['days'] == days and tariff['price'] == price:
                limit_ip = tariff.get('limit_ip', 0)
                break

    last_sub = await db_helpers.get_last_subscription(user_id)
    # –ü—Ä–æ–¥–ª–µ–≤–∞—Ç—å –º–æ–∂–Ω–æ –¥–∞–∂–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π UUID
    current_uuid = last_sub['xui_client_uuid'] if last_sub else None
    current_server_id = last_sub['current_server_id'] if last_sub else None

    payment_metadata = {
        "telegram_user_id": user_id, "subscription_days": days,
        "price": price,
        "bot_payment_uuid": idempotence_key, "is_renewal": bool(last_sub),
        "current_uuid": current_uuid, "current_server_id": current_server_id
    }

    builder = PaymentRequestBuilder()
    builder.set_amount({"value": f"{price:.2f}", "currency": currency}) \
        .set_capture(True) \
        .set_confirmation({"type": "redirect", "return_url": f"https://t.me/{(await bot.get_me()).username}?start=payment_success"}) \
        .set_description(f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π") \
        .set_metadata(payment_metadata)
    
    try:
        payment_response = YKPayment.create(builder.build(), idempotence_key)
        if payment_response.confirmation and payment_response.confirmation.confirmation_url:
            yk_payment_id = payment_response.id
            await db_helpers.add_payment(
                payment_id=yk_payment_id, telegram_id=user_id, amount=price,
                currency=currency, metadata_json=json.dumps(payment_metadata)
            )
            price_str = int(price) if price == int(price) else f"{price:.2f}"
            await query.message.edit_text(
                app_conf.get('text_payment_prompt').format(
                    days=days, price=price_str, currency=currency,
                    payment_url=payment_response.confirmation.confirmation_url
                ),
                reply_markup=keyboards.get_payment_keyboard(yk_payment_id),
                disable_web_page_preview=True
            )
            if yk_payment_id not in active_payment_checkers:
                task = asyncio.create_task(auto_check_payment_status(yk_payment_id, user_id, payment_metadata))
                active_payment_checkers[yk_payment_id] = task
        else:
            raise Exception("No confirmation URL in YK response")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.message.edit_text(app_conf.get('text_error_general'), reply_markup=keyboards.get_back_to_main_keyboard())
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    await query.answer()

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def notify_expiring_subscriptions():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.
    """
    while True:
        users = await db_helpers.get_users_with_expiring_subscriptions(days_before=1)
        for user_id in users:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                active_tariffs = await db_helpers.get_active_tariffs()
                
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                buttons = []
                
                if active_tariffs:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
                    for tariff in active_tariffs:
                        price_display = int(tariff['price']) if tariff['price'].is_integer() else tariff['price']
                        tariff_name = tariff['name'] if tariff['name'] else f"{tariff['days']} –¥–Ω–µ–π"
                        buttons.append([InlineKeyboardButton(
                            text=f"üí≥ {tariff_name} - {price_display} {tariff['currency']}",
                            callback_data=f"renew_sub_{tariff['days']}_{tariff['price']}"
                        )])
                    
                    reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)
                else:
                    # Fallback –∫ —Å—Ç–∞—Ä–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
                    reply_markup = keyboards.get_renew_keyboard()
                
                await bot.send_message(
                    user_id,
                    app_conf.get('text_subscription_expiring', "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø."),
                    reply_markup=reply_markup
                )
                # –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                async with aiosqlite.connect('vpn_bot.db') as db:
                    await db.execute("UPDATE users SET notified_expiring = 1 WHERE telegram_id = ?", (user_id,))
                    await db.commit()
            except TelegramAPIError as e:
                error_text = str(e).lower()
                if 'chat not found' in error_text or 'bot was blocked' in error_text or 'user is deactivated' in error_text:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω. –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è (–≤ notify_expiring).")
                    await db_helpers.deactivate_user(user_id)
                else:
                    logger.error(f'–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}')
            except Exception as e:
                logger.error(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}')
        await asyncio.sleep(24 * 60 * 60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ ---
async def notify_expired_subscriptions():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ.
    """
    while True:
        try:
            users = await db_helpers.get_users_with_expired_subscriptions()
            for user_id in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    active_tariffs = await db_helpers.get_active_tariffs()
                    
                    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                    buttons = []
                    
                    if active_tariffs:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
                        for tariff in active_tariffs:
                            price_display = int(tariff['price']) if tariff['price'].is_integer() else tariff['price']
                            tariff_name = tariff['name'] if tariff['name'] else f"{tariff['days']} –¥–Ω–µ–π"
                            buttons.append([InlineKeyboardButton(
                                text=f"üí≥ {tariff_name} - {price_display} {tariff['currency']}",
                                callback_data=f"renew_sub_{tariff['days']}_{tariff['price']}"
                            )])
                        
                        reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)
                    else:
                        # Fallback –∫ —Å—Ç–∞—Ä–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
                        reply_markup = keyboards.get_renew_keyboard()
                    
                    await bot.send_message(
                        user_id,
                        app_conf.get('text_subscription_expired', "üòî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–µ."),
                        reply_markup=reply_markup
                    )
                    # –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    async with aiosqlite.connect('vpn_bot.db') as db:
                        await db.execute("UPDATE users SET notified_expired = 1 WHERE telegram_id = ?", (user_id,))
                        await db.commit()
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except TelegramAPIError as e:
                    error_text = str(e).lower()
                    if 'chat not found' in error_text or 'bot was blocked' in error_text or 'user is deactivated' in error_text:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω. –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è (–≤ notify_expired).")
                        await db_helpers.deactivate_user(user_id)
                    else:
                        logger.error(f'–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ {user_id}: {e}')
                except Exception as e:
                    logger.error(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ {user_id}: {e}')
        except Exception as e:
            logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ notify_expired_subscriptions: {e}")
        
        await asyncio.sleep(60) # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

@dp.callback_query(F.data == "start_step_guide")
async def start_step_guide(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_android', '–°–∫–∞—á–∞—Ç—å –¥–ª—è üì±Android'), url=app_conf.get('step_guide_android_url', 'https://play.google.com/store/apps/details?id=com.v2raytun.android'))],
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_ios', '–°–∫–∞—á–∞—Ç—å –¥–ª—è üçéiOS'), url=app_conf.get('step_guide_ios_url', 'https://apps.apple.com/ru/app/v2raytun/id6476628951'))],
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_next', '‚û°Ô∏è –î–∞–ª–µ–µ'), callback_data="step_guide_2")],
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_back', '‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é'), callback_data="back_to_main")]
    ])
    await call.message.edit_text(
        app_conf.get('step_guide_1_text', '<b>1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTun</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª.'),
        reply_markup=kb
    )
    await state.set_state(StepByStepGuide.step1)

@dp.callback_query(F.data == "step_guide_2")
async def step_guide_2(call: CallbackQuery, state: FSMContext):
    active_sub = await db_helpers.get_active_subscription(call.from_user.id)
    sub_link = "–í–ê–®–ê_–°–°–´–õ–ö–ê_–ë–£–î–ï–¢_–ó–î–ï–°–¨_–ü–û–°–õ–ï_–ê–ö–¢–ò–í–ê–¶–ò–ò_–ü–û–î–ü–ò–°–ö–ò"
    if active_sub:
        server_conf = await get_server_config(active_sub['current_server_id'])
        if server_conf and active_sub['xui_client_uuid']:
            sub_link = get_subscription_link(server_conf, active_sub['xui_client_uuid'])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_next', '‚û°Ô∏è –î–∞–ª–µ–µ'), callback_data="step_guide_3")],
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_back', '‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é'), callback_data="back_to_main")]
    ])
    await call.message.edit_text(
        app_conf.get('step_guide_2_text', '<b>2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\nüîó <code>{sub_link}</code>\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.').format(sub_link=sub_link),
        reply_markup=kb
    )
    await state.set_state(StepByStepGuide.step2)

@dp.callback_query(F.data == "step_guide_3")
async def step_guide_3(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_next', '‚û°Ô∏è –î–∞–ª–µ–µ'), callback_data="step_guide_4")],
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_back', '‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é'), callback_data="back_to_main")]
    ])
    await call.message.edit_text(
        app_conf.get('step_guide_3_text', '<b>3Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTun</b>\n\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ—Å—Ç—É–ø—ã, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.'),
        reply_markup=kb
    )
    await state.set_state(StepByStepGuide.step3)

@dp.callback_query(F.data == "step_guide_4")
async def step_guide_4(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_next', '‚û°Ô∏è –î–∞–ª–µ–µ'), callback_data="step_guide_5")],
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_back', '‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é'), callback_data="back_to_main")]
    ])
    await call.message.edit_text(
        app_conf.get('step_guide_4_text', '<b>4Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É</b>\n\n–ù–∞–∂–º–∏—Ç–µ <b>+</b> –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª.'),
        reply_markup=kb
    )
    await state.set_state(StepByStepGuide.step4)

@dp.callback_query(F.data == "step_guide_5")
async def step_guide_5(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=app_conf.get('step_guide_btn_back', '‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é'), callback_data="back_to_main")]
    ])
    await call.message.edit_text(
        app_conf.get('step_guide_5_text', '<b>5Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ VPN</b>\n\n–í —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n‚úÖ –ì–æ—Ç–æ–≤–æ! VPN –ø–æ–¥–∫–ª—é—á—ë–Ω.'),
        reply_markup=kb
    )
    await state.clear()

@dp.callback_query(F.data == "renew_show_tariffs")
async def cq_show_tariffs(query: CallbackQuery):
    reply_markup = await keyboards.get_tariffs_keyboard()
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    await query.answer()

# --- –°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def on_startup(dispatcher: Dispatcher):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    - –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YooKassa
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ X-UI —Å–µ—Ä–≤–µ—Ä–∞–º
    - –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    """
    global bot
    await db_helpers.init_db()
    await app_conf.load_settings()
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º bot, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    new_token = os.getenv("BOT_TOKEN", app_conf.get('bot_token', ''))
    if new_token and new_token != bot.token:
        bot_instance = Bot(token=new_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        dispatcher.bot = bot_instance
        bot = bot_instance
    YKConfig.account_id = os.getenv("YOOKASSA_SHOP_ID", app_conf.get('yookassa_shop_id', ''))
    YKConfig.secret_key = os.getenv("YOOKASSA_SECRET_KEY", app_conf.get('yookassa_secret_key', ''))
    bot_info = await bot.get_me()
    logger.success(f"–ë–æ—Ç @{bot_info.username} –∑–∞–ø—É—â–µ–Ω!")
    xui_servers = app_conf.get('xui_servers', [])
    for server_conf in xui_servers:
        client = await xui_manager_instance.get_client(server_conf)
        if client: logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ X-UI: {server_conf.get('name')}")
        else: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ X-UI: {server_conf.get('name')}")
    pending_payments = await db_helpers.get_pending_payments()
    for p in pending_payments:
        pid, uid, _, _, _, created_at_str, meta_str = p
        meta = json.loads(meta_str) if meta_str else {}
        created_at = datetime.fromisoformat(created_at_str).replace(tzinfo=timezone.utc)
        if datetime.now(timezone.utc) - created_at < timedelta(minutes=15):
            logger.info(f"–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {pid}")
            task = asyncio.create_task(auto_check_payment_status(pid, uid, meta))
            active_payment_checkers[pid] = task

# --- –°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ ---
async def on_shutdown(dispatcher: Dispatcher):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:
    - –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    """
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    for task in active_payment_checkers.values():
        task.cancel()
    await asyncio.sleep(1)
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# --- –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:
    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç polling aiogram
    """
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    admin.register_admin_handlers(dp)
    try:
        await app_conf.load_settings()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã
        asyncio.create_task(notify_expiring_subscriptions())  # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
        asyncio.create_task(notify_expired_subscriptions()) # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
        await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º polling aiogram
    finally:
        if bot and bot.session:
            await bot.session.close()

# --- –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ ---
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    asyncio.run(main())